@using Arcemi.Pathfinder.SaveGameEditor.Components.Modals
@inject CharacterViewModel Model
@inject IGameResourcesProvider Resources

<div class="row">
    @if (Unit.IsPet) {
    <div class="col-md-4">
        <label class="form-label">Owner</label>
        <input class="form-control" type="text" readonly="readonly" value="@(Model.GetOwnerOf(Unit)?.Descriptor.Name ?? "N/A")" />
    </div>
    }
    else {
    <div class="col-md-4">
        <label class="form-label">Race</label>
        <input class="form-control" type="text" readonly="readonly" value="@Character.Progression.RaceName" />
    </div>
    }
    <div class="col-md-4">
        <label class="form-label">Voice</label>
        <select class="form-control" @bind="Character.CustomAsks">
            <option value="">Default</option>
            @foreach (var blueprint in Resources.Blueprints.GetEntries(BlueprintTypes.UnitAsksList).OrderBy(b => b.DisplayName)) {
            <option value="@blueprint.Id">@blueprint.DisplayName</option>
            }
        </select>
    </div>
    @if (CompanionPart != null) {
    <div class="col-md-4">
        <label class="form-label">State</label>
        <select class="form-control" disabled="@Unit.IsPlayer" @bind="CompanionPart.State">
            @foreach (var state in CompanionPartState.All){
                <option value="@state.Key">@state.Value</option>
            }
        </select>
    </div>
    }
</div>

@if (Model.IsPlayerButNotMainCharacter(Unit)) {
<div class="row">
    <div class="col-md-3">
        <button class="btn btn-info w-100" @onclick="() => Model.SetAsHero(Unit)" title="You are not set as the main character, fix it by pressing this button">
            <span class="oi oi-wrench"></span>
            Main Char
        </button>
    </div>
</div>
}

<div class="row">
    <div class="col-md-4">
        <label class="form-label">Experience</label>
        <input class="form-control" type="number" @bind="@Character.Progression.Experience" />
    </div>
    <div class="col-md-2">
        <label class="form-label">
            Level
            <Help Size="ElementSize.Small">
                The save game file does not save your current level, it is calculated based on the experience of your characters.
            </Help>
        </label>
        <input class="form-control" type="number" readonly="readonly" value="@Character.Progression.CurrentLevel" />
    </div>
    <div class="col-md-2">
        <label class="form-label" title="Mythic level (0-10)">Mythic</label>
        <input class="form-control" type="number" min="0" max="10" title="Mythic level (0-10)" @bind="Character.Progression.MythicExperience" />
    </div>
</div>

<div class="row">
    <h3 class="col-md-12">Classes</h3>
</div>
<div class="form-list static-content">
    <div class="row">
        <div class="col-md-4">
            <label class="form-label">Name</label>
        </div>
        <div class="col-md-4">
            <label class="form-label">Specialization</label>
        </div>
        <div class="col-md-2">
            <label class="form-label">Level</label>
        </div>
        <div class="col-md-2">
            <button class="btn btn-sm btn-info btn-h4" @onclick="() => OpenAddClassAsync()">
                <span class="oi oi-plus"></span>
            </button>
        </div>
    </div>

    @foreach (var cls in Character.Progression.Classes) {
    <div class="row">
        <div class="col-md-4 overflow-hidden">
            <label class="form-label">@cls.TypeName</label>
        </div>
        <div class="col-md-4 overflow-hidden">
            <label class="form-label">@cls.ArchetypeName</label>
        </div>
        <div class="col-md-2">
            <input class="form-control" type="number" readonly="readonly" value="@cls.Level" />
        </div>
        <div class="col-md-2">
            <button class="btn btn-sm btn-warning" disabled="@(!LevelManipulator.CanDowngrade(cls))" @onclick="() => DowngradeClass(cls)">
                <span class="oi oi-arrow-thick-bottom"></span>
            </button>
        </div>
    </div>
    }
</div>

<div class="row">
    <div class="col-md-12">
        <h3>
            Alignment
            <Help Position="TooltipPosition.BottomRight" Size="ElementSize.Medium">
                You will not be considered the alignment you have set unless you are allowed to have the alignment.
            </Help>
        </h3>
    </div>
</div>
<div class="row">
    <div class="col-md-3">
        <div class="row">
            <div class="col-md-12">
                <label class="form-label">@Character?.Alignment?.Vector?.DisplayName</label>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <label class="form-label">Alignment X-Axis</label>
                <input class="form-control" type="number" min="-100" max="100" @bind="EditAlignmentX" />
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <label class="form-label">Alignment Y-Axis</label>
                <input class="form-control" type="number" min="-100" max="100" @bind="EditAlignmentY" />
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <button class="btn btn-secondary" disabled="@(!(Character.Alignment.History?.Any() ?? false))" @onclick="() => EditAlignmentHistoryAsync()">
                    <span class="oi oi-pencil"></span>
                    Edit history
                </button>
            </div>
        </div>
    </div>
    <div class="col-md-9 alignment">
        <img class="alignment-map" src="/images/alignment-map.png" alt="Alignment" />
        <img class="alignment-dot" src="/images/alignment-dot.png" style="left: @(AlignmentX)px; top: @(AlignmentY)px" />
    </div>
</div>
@if (!IsAlignmentAllowed) {
    <p class="alert alert-danger">
        Your alignment is not allowed. Change your alignment or change the alignment mask to allow it.
        You will not see your new alignment in game until you update this.
    </p>
}
<div class="row">
    <div class="col-md-12">
        <h3>
            Alignment mask
            <Help Position="TooltipPosition.BottomRight" Size="ElementSize.Medium">
                This is the alignments you are allowed to have.
            </Help>
        </h3>
    </div>
</div>
<div class="character-alignment-grid">
<div class="row">
    <div class="col-md-3">
        <div>
            <label for="alignment-LawfulGood" class="form-label-centered">Lawful Good</label>
        </div>
        <div class="text-center">
            <Switch Id="alignment-LawfulGood" @bind-IsChecked="AlignmentMask.IsLawfulGoodAllowed" />
        </div>
    </div>
    <div class="col-md-3">
        <div>
            <label for="alignment-NeutralGood" class="form-label-centered">Neutral Good</label>
        </div>
        <div class="text-center">
            <Switch Id="alignment-NeutralGood" @bind-IsChecked="AlignmentMask.IsNeutralGoodAllowed" />
        </div>
    </div>
    <div class="col-md-3">
        <div>
            <label for="alignment-ChaoticGood" class="form-label-centered">Chaotic Good</label>
        </div>
        <div class="text-center">
            <Switch Id="alignment-ChaoticGood" @bind-IsChecked="AlignmentMask.IsChaoticGoodAllowed" />
        </div>
    </div>
    <div class="col-md-3">
        <div>
            <label for="alignment-Good" class="form-label-centered">Good</label>
        </div>
        <div class="text-center">
            <Switch Id="alignment-Good" @bind-IsChecked="AlignmentMask.IsGoodAllowed" />
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-3">
        <div>
            <label for="alignment-LawfulNeutral" class="form-label-centered">Lawful Neutral</label>
        </div>
        <div class="text-center">
            <Switch Id="alignment-LawfulNeutral" @bind-IsChecked="AlignmentMask.IsLawfulNeutralAllowed" />
        </div>
    </div>
    <div class="col-md-3">
        <div>
            <label for="alignment-TrueNeutral" class="form-label-centered">True Neutral</label>
        </div>
        <div class="text-center">
            <Switch Id="alignment-TrueNeutral" @bind-IsChecked="AlignmentMask.IsTrueNeutralAllowed" />
        </div>
    </div>
    <div class="col-md-3">
        <div>
            <label for="alignment-ChaoticNeutral" class="form-label-centered">Chaotic Neutral</label>
        </div>
        <div class="text-center">
            <Switch Id="alignment-ChaoticNeutral" @bind-IsChecked="AlignmentMask.IsChaoticNeutralAllowed" />
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-3">
        <div>
            <label for="alignment-LawfulEvil" class="form-label-centered">Lawful Evil</label>
        </div>
        <div class="text-center">
            <Switch Id="alignment-LawfulEvil" @bind-IsChecked="AlignmentMask.IsLawfulEvilAllowed" />
        </div>
    </div>
    <div class="col-md-3">
        <div>
            <label for="alignment-NeutralEvil" class="form-label-centered">Neutral Evil</label>
        </div>
        <div class="text-center">
            <Switch Id="alignment-NeutralEvil" @bind-IsChecked="AlignmentMask.IsNeutralEvilAllowed" />
        </div>
    </div>
    <div class="col-md-3">
        <div>
            <label for="alignment-ChaoticEvil" class="form-label-centered">Chaotic Evil</label>
        </div>
        <div class="text-center">
            <Switch Id="alignment-ChaoticEvil" @bind-IsChecked="AlignmentMask.IsChaoticEvilAllowed" />
        </div>
    </div>
    <div class="col-md-3">
        <div>
            <label for="alignment-Evil" class="form-label-centered">Evil</label>
        </div>
        <div class="text-center">
            <Switch Id="alignment-Evil" @bind-IsChecked="AlignmentMask.IsEvilAllowed" />
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-3">
        <div>
            <label for="alignment-Lawful" class="form-label-centered">Lawful</label>
        </div>
        <div class="text-center">
            <Switch Id="alignment-Lawful" @bind-IsChecked="AlignmentMask.IsLawfulAllowed" />
        </div>
    </div>
    <div class="col-md-3">
    </div>
    <div class="col-md-3">
        <div>
            <label for="alignment-Chaotic" class="form-label-centered">Chaotic</label>
        </div>
        <div class="text-center">
            <Switch Id="alignment-Chaotic" @bind-IsChecked="AlignmentMask.IsChaoticAllowed" />
        </div>
    </div>
    <div class="col-md-3">
        <div>
            <label for="alignment-Any" class="form-label-centered">Any</label>
        </div>
        <div class="text-center">
            <Switch Id="alignment-Any" @bind-IsChecked="AlignmentMask.IsAnyAllowed" />
        </div>
    </div>
</div>
</div>

<Modal @ref="modalEditAlignmentHistory">
    <Title>Edit alignment history</Title>
    <Body>
        @if (Character.Alignment?.History?.Count > 0) {
            <div class="form-list">
                <div class="row">
                    <div class="col-md-3">
                        Direction
                    </div>
                    <div class="col-md-3">
                        Provider
                    </div>
                    <div class="col-md-3">
                        Position
                    </div>
                    <div class="col-md-3">
                        <button class="btn btn-sm btn-danger" @onclick="() => RemoveAlignmentEntries()">
                            <span class="oi oi-trash"></span>
                            All
                        </button>
                    </div>
                </div>
                @foreach (var alignment in Character.Alignment.History) {
                    <div class="row">
                        <div class="col-md-3">
                            @alignment.Direction.AsDisplayable()
                        </div>
                        <div class="col-md-3">
                            @alignment.ProviderDisplayName
                        </div>
                        <div class="col-md-3">
                            @alignment.Vector.X, @(alignment.Vector.Y*-1)
                        </div>
                        <div class="col-md-3">
                            <button class="btn btn-sm btn-danger" @onclick="() => RemoveAlignmentEntry(alignment)">
                                <span class="oi oi-trash"></span>
                            </button>
                        </div>
                    </div>
                }
            </div>
        }
    </Body>
    <Footer>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => modalEditAlignmentHistory.CloseAsync()">Done</button>
    </Footer>
</Modal>

<Modal @ref="modalAddClass">
    <Title>Add class</Title>
    <Body>
        <b>Warning: </b> <span>This feature is experimental. Be sure to keep a backup of your save.</span>
        <TabControl StartIndex="0">
            <Tab Name="Search">
                <Content>
                    <Search TItem="IBlueprintMetadataEntry" Items="AvailableClassesBase" ItemSearchable="b => b.Name.DisplayName" Context="item" OnSelect="a => AddClassBlueprint = a.Item.Id">
                        <ResultItemTemplate>
                            @item.Name.DisplayName
                        </ResultItemTemplate>
                    </Search>
                </Content>
            </Tab>
            <Tab Name="All">
                <Content>
                    <div class="row">
                        <div class="col-md-12">
                            <label class="form-label">Class</label>
                            <select class="form-control" @bind="AddClassBlueprint">
                                <option value="">Select feat...</option>
                                @foreach (var blueprint in AvailableClassesBase) {
                                    <option value="@blueprint.Id">@blueprint.DisplayName</option>
                                }
                            </select>
                        </div>
                    </div>
                </Content>
            </Tab>
        </TabControl>
    </Body>
    <Footer>
        <button type="button" class="btn btn-primary" data-dismiss="modal" disabled="@AddClassIsInvalid" @onclick="AddClassAsync">
            Confirm
        </button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => modalAddClass.CloseAsync()">Cancel</button>
    </Footer>
</Modal>

@code {
    [Parameter]
    public UnitEntityModel Unit { get; set; }

    private CharacterModel Character => Unit?.Descriptor;
    private CompanionPartItemModel CompanionPart => Unit?.Parts?.Items?.OfType<CompanionPartItemModel>()?.FirstOrDefault();
    private CharacterLevelManipulator LevelManipulator;

    private const int OffsetX = 20;
    private const int OffsetY = 6;
    private int AlignmentX => (Unit?.Descriptor?.Alignment?.Vector?.X ?? 0) + 100 + OffsetX;
    private int AlignmentY => (Unit?.Descriptor?.Alignment?.Vector?.Y ?? 0) *-1 + 100 + OffsetY;
    private int EditAlignmentX { get => Unit?.Descriptor?.Alignment?.Vector?.X ?? 0; set => Unit.Descriptor.Alignment.Vector.X = value; }
    private int EditAlignmentY { get => (Unit?.Descriptor?.Alignment?.Vector?.Y ?? 0)*-1; set => Unit.Descriptor.Alignment.Vector.Y = value*-1; }

    private AlignmentMaskView AlignmentMask;
    private bool IsAlignmentAllowed => AlignmentMask.IsAlignmentAllowed(Character.Alignment.Vector.Direction);

    private Modal modalAddClass;
    private Modal modalEditAlignmentHistory;

    private string AddClassBlueprint;
    private bool AddClassIsInvalid => string.IsNullOrEmpty(AddClassBlueprint);
    
    private IEnumerable<IBlueprintMetadataEntry> AvailableClassesBase => Resources.Blueprints.GetEntries(BlueprintTypes.CharacterClass)
        .Where(IsValidClass);

    protected override void OnInitialized()
    {
        AlignmentMask = new AlignmentMaskView(UpdateAlignmentMask);
    }

    protected override void OnParametersSet()
    {
        LevelManipulator = new CharacterLevelManipulator(Unit, Resources);
        if (Model.CanEdit) {
            AlignmentMask.Set(Character.Alignment?.LockedAlignmentMask);
        }
        else {
            AlignmentMask.Set(Alignment.Any);
        }
    }

    private void UpdateAlignmentMask(AlignmentMaskView sender)
    {
        if (Character?.Alignment != null) {
            Character.Alignment.LockedAlignmentMask = sender.ToString();
        }
    }

    private async Task EditAlignmentHistoryAsync()
    {
        await modalEditAlignmentHistory.OpenAsync();
    }

    private void RemoveAlignmentEntry(AlignmentHistoryModel entry)
    {
        Character.Alignment.History.Remove(entry);
    }

    private void RemoveAlignmentEntries()
    {
        Character.Alignment.History.Clear();
    }

    private void DowngradeClass(ClassModel cls)
    {
        LevelManipulator.DowngradeClass(cls);
    }

    private async Task OpenAddClassAsync()
    {
        await modalAddClass.OpenAsync();
    }

    private bool IsValidClass(IBlueprintMetadataEntry x)
    {
        return true;
    }

    private async Task AddClassAsync()
    {
        LevelManipulator.AddClass(AddClassBlueprint);
        await modalAddClass.CloseAsync();
    }
}