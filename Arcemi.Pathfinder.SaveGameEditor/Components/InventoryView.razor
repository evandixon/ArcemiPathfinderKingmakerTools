@using Arcemi.Pathfinder.SaveGameEditor.Components.Modals;
@inject IGameResourcesProvider Resources;

@if (Inventory == null) {
    <p class="alert alert-warning">Inventory was not found.</p>
}
else {

    <div class="row g-3 top-toolbar">
        <div class="col-md-6 btn-group">
            <label class="btn btn-info" for="search">
                <span class="oi oi-magnifying-glass"></span>
            </label>
            <input id="search" type="text" class="form-control" placeholder="Search..." @bind="SearchTerm" @bind:event="oninput" />
        </div>
        @if (Resources.Blueprints.GetEntries(BlueprintTypes.Item).Count == 0) {
            <InventoryAddItemFallback Inventory="Inventory" OnItemAdded="item => StateHasChanged()" />
        }
        else {
            <InventoryAddItem Inventory="Inventory" OnItemAdded="item => StateHasChanged()" />
        }
    </div>

    <div class="form-list">
        <div class="row">
            <div class="col-md-4">
                <label class="form-label">Name</label>
            </div>
            <div class="col-md-1">
                <label class="form-label">Type</label>
            </div>
            <div class="col-md-2">
                <label class="form-label">Stack</label>
            </div>
            <div class="col-md-2">
                <label class="form-label">Charges</label>
            </div>
            <div class="col-md-3">
            </div>
        </div>
        @if (!Items.Any()) {
            <div class="row">
                <div class="col-md-12">
                    <p class="alert alert-info">Inventory is empty</p>
                </div>
            </div>
        }
        else {
            @foreach (var item in Items) {
            <div class="row">
                <div class="col-md-4 overflow-hidden">
                    <label class="form-label">@item.DisplayName</label>
                </div>
                <div class="col-md-1">
                    <img src="@GetItemTypeIconUrl(item)" alt="@item.DisplayType" />
                </div>
                <div class="col-md-2">
                    @if (item.IsStackable) {
                        <input class="form-control" type="number" @bind="item.Count" />
                    }
                </div>
                <div class="col-md-2">
                    @if (item.IsChargable) {
                        <input class="form-control" type="number" @bind="item.Charges" />
                    }
                </div>
                <div class="col-md-3">
    @*                <button class="btn btn-sm btn-secondary" title="Duplicate" disabled="@IsDisabledType(item.ItemType)" @onclick="() => Duplicate(item)">
                        <span class="oi oi-fork"></span>
                    </button>*@
                    <button class="btn btn-sm btn-secondary" title="Copy blueprint" @onclick="() => CopyBlueprintIdentifier(item)">
                        <span class="oi oi-paperclip"></span>
                    </button>
                    @if (CanEdit(item)){
                    <button class="btn btn-sm btn-secondary" title="Edit item" @onclick="() => StartEditItemAsync(item)">
                        <span class="oi oi-pencil"></span>
                    </button>
                    }
                    <button class="btn btn-sm btn-danger" title="Remove item" @onclick="() => RemoveItem(item)">
                        <span class="oi oi-trash"></span>
                    </button>
                </div>
            </div>
            }
        }
    </div>
}

<Modal @ref="modalEditItem">
    <Title>Edit item characteristics</Title>
    <Body>
        @if (ItemEnchantable != null) {
            <div class="row"><h3 class="col-md-12">Enchantments</h3></div>
            <div class="row g-3">
                <div class="col-md-3">
                    <label class="form-label">Level</label>
                    <input class="form-control" type="number" min="0" max="@ItemEnchantable.MaxEnchantmentLevel" @bind="ItemEnchantable.EnchantmentLevel" />
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <h4>
                        Current
                        <Help Position="TooltipPosition.BottomRight" Size="ElementSize.Medium">
                            You will only be able to remove enchantments that have been mapped.
                        </Help>
                    </h4>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    @foreach (var fact in ItemEnchantable.Facts.Items.OfType<EnchantmentFactItemModel>().Where(f => !f.IsLevel)) {
                        <span class="badge badge-secondary m-1">
                            @fact.DisplayName
                            @if (!fact.IsMapped) {
                                <button class="btn btn-sm btn-secondary" @onclick="() => CopyEnchantmentData(fact)">
                                    <span class="oi oi-paperclip"></span>
                                </button>
                            }
                            <button class="btn btn-sm btn-secondary" @onclick="() => RemoveEnchantmentFact(fact)">
                                &times;
                            </button>
                        </span>
                    }
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <h4>
                        Add new
                        <Help Position="TooltipPosition.BottomRight" Size="ElementSize.Medium">
                            You will only be able to add enchantments that are mapped by the editor.
                        </Help>
                    </h4>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <Search TItem="EnchantmentSpec" Items="MappedEnchantments.Where(i => !ItemEnchantable.HasEnchantment(i))" ItemSearchable="b => b.Name" Context="item" OnSelect="a => ItemEnchantable.AddEnchantmentFact(a.Item)" Height="ElementSize.Small">
                        <ResultItemTemplate>
                            @item.Name
                        </ResultItemTemplate>
                    </Search>
                </div>
            </div>
        }
        @if (Item?.ItemType == ItemType.Usable) {
            <div class="row"><h3 class="col-md-12">Crafted item</h3></div>
            if (ItemCrafted != null) {
                <div class="row g-3">
                    <div class="col-md-3">
                        <label class="form-label">Caster level</label>
                        <Help Size="ElementSize.Small" Position="TooltipPosition.BottomRight">
                            The higher the caster level the greater the duration, damage, effect.
                        </Help>
                        <input class="form-control" type="number" min="1" max="20" @bind="ItemCrafted.CasterLevel" />
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Spell level</label>
                        <Help Size="ElementSize.Small" Position="TooltipPosition.BottomRight">
                            For scrolls only you will need to roll 1d20 + your "Use Magic Device" against the spell level &times; 2.
                            I recommend you set this to a low value.
                        </Help>
                        <input class="form-control" type="number" min="1" max="20" @bind="ItemCrafted.SpellLevel" />
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Ability DC</label>
                        <Help Size="ElementSize.Small">
                            This is the DC the target must overcome.
                        </Help>
                        <input class="form-control" type="number" min="1" max="100" @bind="ItemCrafted.AbilityDC" />
                    </div>
                </div>
            }
            else {
                <div class="row g-3">
                    <div class="col-md-12">
                        <button class="btn btn-info" @onclick="() => UnlockCraftedItem()">
                            <span class="oi oi-lock-locked"></span>
                            Set as crafted
                        </button>
                    </div>
                </div>
            }
        }
    </Body>
    <Footer>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => modalEditItem.CloseAsync()">Close</button>
    </Footer>
</Modal>

@code {
    [Parameter]
    public InventoryModel Inventory { get; set; }

    private Modal modalEditItem;
    private ItemModel Item;
    private CraftedPartItemModel ItemCrafted;
    private IEnchantableItemModel ItemEnchantable;
    private IReadOnlyList<EnchantmentSpec> MappedEnchantments;

    private string GetItemTypeIconUrl(ItemModel item)
    {
        if (Resources.Blueprints.TryGet(item.Blueprint, out var blueprint)) {
            if (blueprint.Type.IsItemWeapon) {
                return "/images/ItemTypes/Weapons.png";
            }
            if (blueprint.Type.IsItemArmorOrShield) {
                return "/images/ItemTypes/ArmorsAndShields.png";
            }
            if (blueprint.Type.IsItemAccessory) {
                return "/images/ItemTypes/Accessories.png";
            }
            if (blueprint.Type.IsItemIngredient) {
                return "/images/ItemTypes/Ingredients.png";
            }
            if (blueprint.Type.IsItemUsable) {
                return "/images/ItemTypes/Usable.png";
            }
            if (blueprint.Type.IsItemNotable) {
                return "/images/ItemTypes/Notable.png";
            }
            return "/images/ItemTypes/Other.png";
        }
        switch (item.ItemType) {
            case ItemType.Weapon:
                return "/images/ItemTypes/Weapons.png";
            case ItemType.Armor:
            case ItemType.Shield:
                return "/images/ItemTypes/ArmorsAndShields.png";
            case ItemType.Usable:
                return "/images/ItemTypes/Usable.png";
        }
        return "/images/ItemTypes/Other.png";
    }

    private bool CanEdit(ItemModel item)
    {
        return item.ItemType == ItemType.Usable
            || item.ItemType == ItemType.Weapon
            || item.ItemType == ItemType.Armor
            //|| item.ItemType == ItemType.Shield
            ;
    }

    private async Task StartEditItemAsync(ItemModel item)
    {
        Item = item;
        ItemCrafted = item.Parts.Items.OfType<CraftedPartItemModel>().FirstOrDefault();
        ItemEnchantable = item as IEnchantableItemModel;
        if (item is WeaponItemModel) {
            MappedEnchantments = Enchantments.Weapon.All;
        }
        else if (item is ArmorItemModel) {
            MappedEnchantments = Enchantments.Armor.All;
        }
        else if (item is ShieldItemModel) {
            MappedEnchantments = Enchantments.Shield.All;
        }
        await modalEditItem.OpenAsync();
    }

    private void RemoveItem(ItemModel item)
    {
        Inventory.Items.Remove(item);
    }

    private void UnlockCraftedItem()
    {
        ItemCrafted = Item.SetAsCrafted();
    }

    private static readonly HashSet<string> ItemFilter = new HashSet<string>(StringComparer.Ordinal) {
        "95c126deb99ba054aa5b84710520c035" // Finnean Base Item
    };

    private bool IsVisibleItem(ItemModel i)
    {
        if (!string.IsNullOrEmpty(i.WielderRef)) return false;
        if (i.HoldingSlot != null) return false;
        if (ItemFilter.Contains(i.Blueprint)) return false;
        return true;
        //if (!Resources.Blueprints.TryGet(i.Blueprint, out var blueprint)) return true;
        //if (!(blueprint.Name is BlueprintItemName itemName)) return true;
        //return !itemName.IsFinnean && !itemName.IsNaturalWeapon();
    }

    private string SearchTerm;
    private IEnumerable<ItemModel> Items => Inventory.Items
        .Where(IsVisibleItem)
        .OrderByDescending(i => CalculateScore(i)).ThenBy(i => i.InventorySlotIndex);

    private void CopyBlueprintIdentifier(ItemModel i)
    {
        ElectronNET.API.Electron.Clipboard.WriteText(i.Blueprint);
    }

    private void CopyEnchantmentData(EnchantmentFactItemModel fact)
    {
        ElectronNET.API.Electron.Clipboard.WriteText(string.Concat(
            fact.DisplayName, Environment.NewLine,
            fact.Blueprint, Environment.NewLine,
            string.Join(Environment.NewLine, fact.Components.Keys)));
    }

    private int CalculateScore(ItemModel i)
    {
        var t = SearchTerm;
        if (string.IsNullOrEmpty(t)) return 0;
        bool M(string v) => string.Equals(t, v, StringComparison.OrdinalIgnoreCase);
        bool C(string v) => v != null && v.Contains(t, StringComparison.OrdinalIgnoreCase);

        var s = 0;
        if (M(i.Blueprint)) s += 200;
        if (M(i.DisplayName)) s += 200;
        if (M(i.DisplayType)) s += 200;
        if (C(i.Blueprint)) s += 100;
        if (C(i.DisplayName)) s += 100;
        if (C(i.DisplayType)) s += 100;
        if (C(i.DisplayDescription)) s += 50;

        return s;
    }

    private void Duplicate(ItemModel item)
    {
        Inventory.Duplicate(item);
    }

    private void RemoveEnchantmentFact(EnchantmentFactItemModel fact)
    {
        ItemEnchantable.Facts.Items.Remove(fact);
    }
}