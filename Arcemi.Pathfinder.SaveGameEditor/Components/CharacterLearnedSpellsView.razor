@inject IGameResourcesProvider Resources

@if (LearnedSpells?.Count > 0) {
    for (var i = 0; i < LearnedSpells.Count; i++){
        var thisLevel = i;
        var arr = LearnedSpells[thisLevel];
        var maxKnown = SpellsPerDayBySpellLevel != null && SpellsPerDayBySpellLevel.Count.Count > i
            ? (int?)SpellsPerDayBySpellLevel.Count[i]
            : null;
        <div class="row">
            <div class="col-md-6">
                @if (maxKnown.HasValue)
                {
                    <h4>Level @thisLevel (Max @maxKnown.Value)</h4>
                }
                else 
                {
                    <h4>Level @thisLevel</h4>
                }
            </div>
            <div class="col-md-1">
                <button class="btn btn-sm btn-info btn-h4" @onclick="() => OpenAddSpellAsync(thisLevel)">
                    <span class="oi oi-plus"></span>
                </button>
            </div>
        </div>
        if (arr.Count == 0) {
            <div class="row">
                <div class="col-md-12">
                    <p class="alert alert-info">
                        No spells
                    </p>
                </div>
            </div>
        }
        else {
            foreach (var spell in arr) {
                <div class="row">
                    <div class="col-md-6">
                        @spell.DisplayName
                    </div>
                    <div class="col-md-1">
                        <button class="btn btn-sm btn-danger" @onclick="() => RemoveSpell(spell)">
                            <span class="oi oi-trash"></span>
                        </button>
                    </div>
                </div>
            }
        }
    }
}

<Modal @ref="modalAddSpell">
    <Title>Add spell for level @AddSpellLevel</Title>
    <Body>
        <TabControl StartIndex="0">
            <Tab Name="Search">
                <Content>
                    <Search TItem="IBlueprintMetadataEntry" Items="GetAvailableSpells()" ItemSearchable="b => b.Name.DisplayName" Context="item" OnSelect="a => AddSpellBlueprint = a.Item.Id">
                        <ResultItemTemplate>
                            @item.Name.DisplayName
                        </ResultItemTemplate>
                    </Search>
                </Content>
            </Tab>
            <Tab Name="All">
                <Content>
                    <div class="row">
                        <div class="col-md-12">
                            <label class="form-label">Spell</label>
                            <select class="form-control" @bind="AddSpellBlueprint">
                                <option value="">Select spell...</option>
                                @foreach (var blueprint in GetAvailableSpells()) {
                                    <option value="@blueprint.Id">@blueprint.DisplayName</option>
                                }
                            </select>
                        </div>
                    </div>
                </Content>
            </Tab>
        </TabControl>
        <input id="checkboxShowAll" type="checkbox" checked="@AddSpellShowAll" @onchange="@(e => AddSpellShowAll = (bool)e.Value)" /> <label for="checkboxShowAll">Show All</label>
    </Body>
    <Footer>
        <button type="button" class="btn btn-primary" data-dismiss="modal" disabled="@AddSpellIsInvalid" @onclick="AddSpellAsync">
            Confirm
        </button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => modalAddSpell.CloseAsync()">Cancel</button>
    </Footer>
</Modal>

@code {
    [Parameter]
    public ListD2Accessor<LearnedSpellModel> LearnedSpells { get; set; }

    [Parameter]
    public int SpellbookLevel { get; set; }

    [Parameter]
    public string SpellbookBlueprintId { get; set; }

    private bool OrderByName = true;
    private BlueprintSpellsTableLevel SpellsPerDayBySpellLevel;
    private Blueprint<BlueprintSpellbook> SpellbookBlueprint;

    protected override async Task OnParametersSetAsync()
    {
        SpellsPerDayBySpellLevel = null;
        if (!string.IsNullOrEmpty(SpellbookBlueprintId) && SpellbookLevel > 0)
        {
            SpellbookBlueprint = await Resources.BlueprintsRepository.GetBlueprintAsync<BlueprintSpellbook>(SpellbookBlueprintId);
            if (SpellbookBlueprint.Data.m_SpellsKnown != null)
            {
                var spellsTable = await SpellbookBlueprint.Data.m_SpellsKnown.DereferenceAsync(Resources.BlueprintsRepository);
                if (spellsTable != null)
                {
                    var spellsPerDayBySpellbookLevel = spellsTable.Data.Levels;
                    if (spellsPerDayBySpellbookLevel.Count > SpellbookLevel)
                    {
                        SpellsPerDayBySpellLevel = spellsPerDayBySpellbookLevel[SpellbookLevel];
                    }
                }
            }
        }
    }

    private IEnumerable<IBlueprintMetadataEntry> GetAvailableSpells()
    {
        IEnumerable<IBlueprintMetadataEntry> spells = Resources.Blueprints.GetEntries(BlueprintTypes.Ability).Where(IsValidSpell);

        if (!AddSpellShowAll && SpellbookBlueprint != null)
        {
            var spellsTable = SpellbookBlueprint?.Data?.m_SpellList?.Dereference(Resources.BlueprintsRepository);
            if (spellsTable != null)
            {
                var allowedSpells = spellsTable.Data.SpellsByLevel.FirstOrDefault(l => l.SpellLevel == AddSpellLevel);
                if (allowedSpells != null)
                {
                    var allowedSpellIds = allowedSpells.m_Spells.Select(m => m.Id).ToHashSet();
                    spells = spells.Where(s => allowedSpellIds.Contains(s.Id));
                }
            }
        }

        if (OrderByName)
        {
            spells = spells.OrderBy(s => s.Name.DisplayName);
        }

        return spells;
    }

    private bool IsValidSpell(IBlueprintMetadataEntry x)
    {
        return !Spells.IsSpecial(x);
    }

    private Modal modalAddSpell;
    private string AddSpellBlueprint;
    private int AddSpellLevel;
    private bool AddSpellShowAll;
    private bool AddSpellIsInvalid => string.IsNullOrEmpty(AddSpellBlueprint);

    private void SelectAddSpellBlueprint(IBlueprintMetadataEntry blueprint)
    {
        AddSpellBlueprint = blueprint.Id;
    }

    private async Task OpenAddSpellAsync(int level)
    {
        AddSpellLevel = level;
        await modalAddSpell.OpenAsync();
    }

    private async Task AddSpellAsync()
    {
        var spell = LearnedSpells.Add(AddSpellLevel);
        spell.Blueprint = AddSpellBlueprint;
        spell.CopiedFromScroll = false;
        spell.UniqueId = Guid.NewGuid().ToString();

        AddSpellBlueprint = null;
        AddSpellLevel = 0;
        await modalAddSpell.CloseAsync();
    }

    private void RemoveSpell(LearnedSpellModel spell)
    {
        LearnedSpells.Remove(spell);
    }
}